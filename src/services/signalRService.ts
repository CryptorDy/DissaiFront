import { ChatMessage, ChatParticipant } from '../types/chat';

class SignalRService {
  private messageCallbacks: ((message: ChatMessage) => void)[] = [];
  private participantCallbacks: ((participants: ChatParticipant[]) => void)[] = [];
  private isConnected = false;
  private currentChatId: string | null = null;
  private mockResponses: { [key: string]: string[] } = {
    'student': [
      '**–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å!** –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –µ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ:\n\n1. –ü–µ—Ä–≤—ã–π –∞—Å–ø–µ–∫—Ç\n2. –í—Ç–æ—Ä–æ–π –∞—Å–ø–µ–∫—Ç\n3. –¢—Ä–µ—Ç–∏–π –∞—Å–ø–µ–∫—Ç',
      '–í —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ:\n\n- –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç\n- –í–∞–∂–Ω–∞—è –¥–µ—Ç–∞–ª—å\n- –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã–≤–æ–¥',
      '–ú–æ–≥—É –ø—Ä–∏–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤:\n\n```\n–ü—Ä–∏–º–µ—Ä 1: ...\n–ü—Ä–∏–º–µ—Ä 2: ...\n–ü—Ä–∏–º–µ—Ä 3: ...\n```'
    ],
    'discussion': [
      '–° **—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π** —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, —ç—Ç–æ —è–≤–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–∞–∫:\n\n> –í–∞–∂–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n\n–î–∞–ª–µ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ...',
      '–ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –º—ã —á–∞—Å—Ç–æ —Å—Ç–∞–ª–∫–∏–≤–∞–µ–º—Å—è —Å –¥—Ä—É–≥–∏–º –ø–æ–¥—Ö–æ–¥–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n1. –ü–µ—Ä–≤—ã–π —Å–ª—É—á–∞–π\n2. –í—Ç–æ—Ä–æ–π —Å–ª—É—á–∞–π\n\n–ß—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º?',
      '–ü–æ–∑–≤–æ–ª—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å *–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π* –≤–∑–≥–ª—è–¥ –Ω–∞ —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É:\n\n- –ü–ª—é—Å—ã: ...\n- –ú–∏–Ω—É—Å—ã: ...\n- –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è: ...'
    ],
    'brainstorm': [
      'üéØ –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —ç—Ç–æ —Å —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã:\n\n1. **–ò–¥–µ—è**: ...\n2. **–†–µ–∞–ª–∏–∑–∞—Ü–∏—è**: ...\n3. **–†–µ–∑—É–ª—å—Ç–∞—Ç**: ...',
      'üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ, –º–æ–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã–≤–æ–¥—É:\n\n```\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n- –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å 1: ...\n- –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å 2: ...\n```',
      'üí° –° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–ª–µ–¥—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ:\n\n1. –≠—Ç–∞–ø 1\n2. –≠—Ç–∞–ø 2\n3. –≠—Ç–∞–ø 3'
    ]
  };

  async connect(chatId: string) {
    this.currentChatId = chatId;
    this.isConnected = true;
    
    setTimeout(() => {
      const sender = this.getAIParticipant(chatId);
      if (sender) {
        this.messageCallbacks.forEach(callback => callback({
          id: Date.now().toString(),
          content: 'üëã **–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!** –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å *markdown* –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.',
          sender,
          timestamp: new Date()
        }));
      }
    }, 1000);
  }

  async disconnect() {
    this.isConnected = false;
    this.currentChatId = null;
  }

  async sendMessage(content: string) {
    if (!this.isConnected || !this.currentChatId) return;

    setTimeout(() => {
      const responses = this.mockResponses[this.currentChatId!];
      const randomResponse = responses[Math.floor(Math.random() * responses.length)];
      const sender = this.getAIParticipant(this.currentChatId!);
      
      if (sender) {
        this.messageCallbacks.forEach(callback => callback({
          id: Date.now().toString(),
          content: randomResponse,
          sender,
          timestamp: new Date()
        }));
      }
    }, 1000 + Math.random() * 2000);
  }

  async deleteMessage(messageId: string) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Promise
    return new Promise<void>((resolve) => {
      setTimeout(resolve, 500);
    });
  }

  onMessage(callback: (message: ChatMessage) => void) {
    this.messageCallbacks.push(callback);
    return () => {
      this.messageCallbacks = this.messageCallbacks.filter(cb => cb !== callback);
    };
  }

  onParticipantsUpdate(callback: (participants: ChatParticipant[]) => void) {
    this.participantCallbacks.push(callback);
    return () => {
      this.participantCallbacks = this.participantCallbacks.filter(cb => cb !== callback);
    };
  }

  private getAIParticipant(chatId: string): ChatParticipant | null {
    switch (chatId) {
      case 'student':
        return {
          id: 'mentor',
          name: '–ú—É–¥—Ä–µ—Ü',
          role: '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫',
          isOnline: true
        };
      case 'discussion':
        return {
          id: Math.random() > 0.5 ? 'expert1' : 'expert2',
          name: Math.random() > 0.5 ? '–≠–∫—Å–ø–µ—Ä—Ç 1' : '–≠–∫—Å–ø–µ—Ä—Ç 2',
          role: Math.random() > 0.5 ? '–¢–µ–æ—Ä–µ—Ç–∏–∫' : '–ü—Ä–∞–∫—Ç–∏–∫',
          isOnline: true
        };
      case 'brainstorm':
        const roles = [
          {
            id: 'creative',
            name: '–ö—Ä–µ–∞—Ç–∏–≤—â–∏–∫',
            role: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π'
          },
          {
            id: 'analyst',
            name: '–ê–Ω–∞–ª–∏—Ç–∏–∫',
            role: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ'
          },
          {
            id: 'pragmatic',
            name: '–ü—Ä–∞–≥–º–∞—Ç–∏–∫',
            role: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è'
          }
        ];
        const randomRole = roles[Math.floor(Math.random() * roles.length)];
        return {
          ...randomRole,
          isOnline: true
        };
      default:
        return null;
    }
  }
}

export const signalRService = new SignalRService();